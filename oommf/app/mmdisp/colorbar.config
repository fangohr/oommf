# FILE: errorstripe.config           -*-Mode: tcl-*-
#
# mmDisp configuration.  This file must be valid Tcl code.

# This file should only be sourced from within another Tcl application.
# Check to make sure we aren't at the top application level
if {[string match [info script] $argv0]} {
    error "'[info script]' must be evaluated by an mmdisp-style application"
}

# Plot configuration array
array set plot_config {
   arrow,antialias           1
   arrow,autosample          0
   arrow,colorcount          64
   arrow,colormap            HighContrastGray
   arrow,colorphase          0
   arrow,colorreverse        0
   arrow,quantity            x
   arrow,size                1
   arrow,status              0
   arrow,subsample           15
   arrow,outlinewidth        1.0
   arrow,outlinecolor        black
   misc,background           white
   misc,boundarycolor        black
   misc,boundarywidth        5
   misc,datascale            1
   misc,defaultwindowheight  480
   misc,defaultwindowwidth   640
   misc,drawboundary         1
   misc,height               424
   misc,margin               10
   misc,relcenterpt          {0.5 0.5 0.5}
   misc,rotation             0
   misc,width                100
   misc,zoom                 4.0
   pixel,autosample          0
   pixel,colorcount          16384
   pixel,colormap            Blue-White-Red
   pixel,colorphase          0
   pixel,colorreverse        0
   pixel,opaque              1
   pixel,quantity            x
   pixel,size                1
   pixel,status              1
   pixel,subsample           0
   viewaxis                  +z
   viewaxis,xarrowspan       {}
   viewaxis,xpixelspan       {}
   viewaxis,yarrowspan       {}
   viewaxis,ypixelspan       {}
   viewaxis,zarrowspan       1
   viewaxis,zpixelspan       1
}

array set print_config {
   croptoview                1
   hpos                      center
   lmargin                   1.0
   orient                    landscape
   paper                     letter
   pheight                   4.556
   pwidth                    6.0
   tmargin                   1.0
   units                     in
   vpos                      center
}

# NOTES: This sample configuration file can be used as a base to create
# colorbar images for publications and presentations. Typically one
# creates a supplemental configuration file with the desired changes and
# then uses the -config option to avf2ppm (or avf2ps) to load first
# colorbar.config and then the user file. For example, if you wanted to
# change the pixel colormap and phase, you could create a file, say
# foo.config, with this content:
#
#    array set plot_config {
#       pixel,colormap    Green-White-Orange
#       pixel,colorphase  -0.5
#    }
#
# and then run avf2ppm like so
#
#   tclsh oommf.cl avf2ppm -config colorbar.config -config foo.config \
#      -format png colorbar.ovf
#
# which will output colorbar.png
#
# The colorbar.config file sets
#
#   misc,datascale            1
#
# This provides a full scale colorbar rendering when used in conjunction
# with colorbar.ovf, which contains values running from -1 to 1. The
# configuration file you use for your simulation display usually
# contains a datascale setting appropriate for scaling the colormap to
# fit the simulation data; in particular, the misc,datascale setting in
# the simulation .config file typically corresponds to the extreme
# values on the colorbar. In practice this means that the colorbar
# .config file should normally leave misc,datascale set to 1, and the
# misc,datascale value in the simulation .config file is used to
# annotate the extreme values on the colorbar associated with the
# simulation display. The output from 'tclsh oommf.tcl avf2ovf -info
# mysimulation.omf' may also be helpful in hand tuning datascale and
# colorphase settings.
#
# One issue with the mmDisp config settings is that the colormaps are
# zero centered; for example, if the "Blue-White-Red" colormap is
# selected with a "Data Scale" of 860 kA/m, then full scale blue will
# represent -860 kA/m, red will be +860 kA/m, and white 0 kA/m. This is
# fine if the data values range across that full range, but what if we
# are using the color to mark the x-component of the magnetization in a
# sample that is close to saturation in the +x direction? Perhaps Mx
# ranges from +400 kA/m to +860 kA/m. In this case the coloring will
# only vary from pink to red, and some features might not be clearly
# discernible. In this case one can use the misc,datascale and
# pixel,colorphase setting to offset and expand the color scale to
# make use of the full colormap:
#
# 1) Determine the min and max values you want to display. You may be
#    able to estimate these values from the mmDisp display, by
#    Shift+<Left Mouse Button> or Ctrl+Shift+<Left Mouse Button> at
#    various points on the display. But you can also use avf2odt to
#    extract extremal values. As an example, suppose you want to find
#    the minimal and maximum Mx in the file foo.omf. Then run
#
#      tclsh oommf.tcl avf2odt -average point -onefile - foo.omf \
#         -headers none | sort -g -k4 | less
#
#    where "sort" is the unix (or macOS) sort utility, with -g
#    indicating a general numeric sort (rather than alphabetical) and
#    -k4 requests to sort on the fourth column (which will be the Mx
#    column in avf2odt output). The smallest value in the fourth column
#    will be at the top of the output and the largest at the bottom.
#    For this example let's say the max Mx value is 860000 A/m, and the
#    minimum is 400000 A/m, and label these values as Vmax and Vmin,
#    respectively.
#
# 2) Edit the foo.omf config file, setting
#
#       misc,datascale = (Vmax-Vmin)/2 = 230000
#       pixel,colorphase = -0.5*(Vmax+Vmin)/(Vmax-Vmin) = -1.37
#
#    and then run avf2ppm or avf2ps as usual. The output will
#    use the full colormap space.
#
# This technique is also useful for scalar field quantities like energy
# density maps, which are usually not symmetric wrt zero.
#
#
#
# The OOMMF avf2ppm utility produces PPM, uncompressed Microsoft 24-bit
# BMP format, and true color PNG. You may have third-party utilities
# that can be used to further manipulate the images. For example, you
# can create GIF files with the pnmquant and ppmtogif programs from
# Netpbm:
#
#   tclsh oommf.cl avf2ppm -config colorbar.config -f \
#   -filter 'pnmquant -spreadluminosity -meancolor 255 | ppmtogif' \
#   -opatsub .gif colorbar.ovf
#
# The output file colorbar.gif will have dimensions as specified by the
# misc,height and misc,width settings in the .config file.
#
#
# For output containing arrows that can be cleanly scaled, use the OOMMF
# avf2ps utility, which creates Encapsulated PostScript (EPS) files with
# vector graphics. For example,
#
#    tclsh oommf.cl avf2ps -config colorbar.config colorbar.ovf
#
# If you have ghostscript (gs) installed then you can use the ps2pdf
# utility from that package to convert EPS to Portable Document Format
# (PDF) with the command
#
#    ps2pdf -dEPSCrop colorbar.eps
#
# The "Available devices" portion of the 'gs --help' command output
# lists the output types supported by the gs install. For example, if
# the 24-bit true color PNG device 'png16m' is installed, you could run
#
#   gs -dBATCH -dNOPAUSE -dSAFER -sDEVICE=png16m -dEPSCrop \
#      -sOutputFile=colorbar.png colorbar.eps
#
# In most cases avf2ppm will do this conversion more cleanly, but the
# above may be useful if your gs install supports output formats that
# you don't otherwise have conversion tools for. (Also note that
# regardless of the conversion methods, once in bitmap format an
# image won't scale smoothly.)
#
# Here is a final example using gs and Netpbm tools to create a GIF
# file:
#
#   gs -q -dBATCH -dNOPAUSE -dSAFER -sDEVICE=ppmraw -dEPSCrop \
#      -r394 -sOutputFile=- colorbar.eps \
#      | pamflip -cw | ppmquant 256 | ppmtogif > colorbar.gif
#
# The gs '-r394' option controls the output size; the image height
# will be close to the -r value multiplied by the print_config
# pheight setting above. (There is some rounding depending on the
# margins.) You may also have a pstopnm program as part of netpbm
# which performs the first (gs) part of the command. This is easier
# to use (...if it is properly installed).
#
