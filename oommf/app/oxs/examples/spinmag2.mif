# MIF 2.1
# MIF Example File: spinmag.mif
# Description: Rotating applied field that stays "lead" degrees ccw
#   ahead in xy-plane of average magnetization.  Compare to rotate.mif
#   and rotatecenter.mif.

set pi [expr {4*atan(1.0)}]
set mu0 [expr {4*$pi*1e-7}]

RandomSeed 1

Parameter rkmethod rkf54 ;# One of rk2, rk2heun, rk4, rkf54, rkf54m, or rkf54s.

Parameter lead_ang 30  ;# Lead angle, in degrees
set lead_ang [expr {$pi*$lead_ang/180.}]
set lead_cos [expr {cos($lead_ang)}]
set lead_sin [expr {sin($lead_ang)}]

Parameter Happ 75  ;# Field strength in mT

Parameter cellsize 5e-9

Specify Oxs_BoxAtlas:atlas {
  xrange {0 100e-9}
  yrange {0 100e-9}
  zrange {0  10e-9}
}

Specify Oxs_RectangularMesh:mesh [subst {
  cellsize {$cellsize $cellsize $cellsize}
  atlas :atlas
}]

Specify Oxs_CubicAnisotropy {
     K1  48e3
  axis1 {1 0 0}
  axis2 {0 1 0}
}

Specify Oxs_UniformExchange {
  A  21e-12
}

# Script to apply a smoothly varying Zeeman field that rotates the
# average magnetization in a counterclockwise direction.
proc SpinMag2 { stage_time base_state_id } {
   ## Uncomment the following lines for debugging.  Bring up
   ## "File|Show Console" in Oxsii to see the report.
   # set report {}
   # foreach {key value} [GetStateData -pairs $base_state_id *] {
   #   append report [format "%42s : $value\n" $key]
   # }
   # Report "--- State data ---\n$report"
   global lead_ang
   if {$stage_time == 0.0} {
      # Stage transition. No stepping involved, so dM/dt not needed and
      # might not be available.
      lassign [GetStateData $base_state_id *:Mx *:My *:Mz] Mx My Mz
      set dMx [set dMy [set dMz 0.0]]
      set base_time 0.0
   } else {
      lassign [GetStateData $base_state_id stage_elapsed_time \
                  *:Mx *:My *:Mz *:dMx/dt *:dMy/dt *:dMz/dt] \
         base_time Mx My Mz dMx dMy dMz
   }
   
   set timestep [expr {$stage_time - $base_time}]
   if {$timestep<0.0} {
      error "Negative time step? base_state_id=$base_state_id\
             stage_time=$stage_time, base_time=$base_time"
   }

   # Ignore Mz and rotate in xy-plane
   set Mnorm [expr {sqrt($Mx*$Mx+$My*$My)}]
   if {$Mnorm == 0.0} {
      # Ave m is parallel to z-axis.  What to do?
      return [list 0. 0. 0. 0. 0. 0.]
   } else {
      set mx [expr {$Mx/$Mnorm}]
      set my [expr {$My/$Mnorm}]
      set dmx [expr {$dMx/$Mnorm}]
      set dmy [expr {$dMy/$Mnorm}]
   }
   
   # Use cross product to get norm and direction of dm orthogonal to m.
   # Here positive speed means ccw rotation.
   set speed [expr {$mx*$dmy - $my*$dmx}]

   set del_ang [expr {$speed*$timestep}]
   set cos_lead [expr {cos($lead_ang+$del_ang)}]
   set sin_lead [expr {sin($lead_ang+$del_ang)}]
   set hx [expr {$mx*$cos_lead - $my*$sin_lead}]
   set hy [expr {$mx*$sin_lead + $my*$cos_lead}]

   # Compute dh/dt
   set dhx [expr {-1*$hy*$speed}]
   set dhy [expr {$hx*$speed}]

   return [list $hx $hy 0. $dhx $dhy 0.]
}

Specify Oxs_ScriptUZeeman:rotating [subst {
  script SpinMag2
  script_args {stage_time base_state_id}
  multiplier [expr {$Happ*(0.001/$mu0)}]
}]

Specify Oxs_Demag {}

Specify Oxs_RungeKuttaEvolve:evolve [subst {
   alpha 0.1
   method $rkmethod
}]

Specify Oxs_TimeDriver {
 evolver :evolve
 stopping_time 1e-9
 comment {stage_iteration_limit 1009}
 stage_count 10
 mesh :mesh
 Ms 1700e3
 m0 {1 0 0}
}

set TWOPI [expr {8*atan(1.)}]

