# MIF 2.1
# MIF Example File: spinmag.mif
# Description: Rotating applied field that stays "lead" degrees ccw
#   ahead in xy-plane of average magnetization.  Compare to rotate.mif
#   and rotatecenter.mif.

set pi [expr {4*atan(1.0)}]
set mu0 [expr {4*$pi*1e-7}]

RandomSeed 1

Parameter rkmethod rkf54 ;# One of rk2, rk2heun, rk4, rkf54, rkf54m, or rkf54s.

Parameter Happ 75  ;# Field strength in mT

Parameter cellsize 5e-9

Specify Oxs_BoxAtlas:atlas {
  xrange {0 100e-9}
  yrange {0 100e-9}
  zrange {0  10e-9}
}

Specify Oxs_RectangularMesh:mesh [subst {
  cellsize {$cellsize $cellsize $cellsize}
  atlas :atlas
}]

Specify Oxs_CubicAnisotropy {
     K1  48e3
  axis1 {1 0 0}
  axis2 {0 1 0}
}

Specify Oxs_UniformExchange {
  A  21e-12
}

# Script to apply a Zeeman field that rotates the average magnetization
# in a counterclockwise direction.  This field is continuous within a
# time step but may be discontinuous between steps, so the energy step
# size control (energy_precision) must be disabled in
# Oxs_RungeKuttaEvolve.
proc SpinMag { base_state_id } {
   global pi
   # Acquire average magnetization direction
   lassign [GetStateData $base_state_id *:Mx *:My *:Mz] Mx My Mz

   # Determing in-plane angle of magnetization (in degrees).
   if {$Mx==0.0 && $My==0.0} {
      set theta 0.0 ;# What else?
   } else {
      set theta [expr {atan2($My,$Mx)*180./$pi}]
      ## -180 <= theta <= 180
   }

   if {$theta>=135 || $theta<-135} {
      set hx  0.0; set hy -1.0
   } elseif {$theta<-45} {      ;# -135 <= theta <-45
      set hx  1.0; set hy  0.0
   } elseif {$theta<45}  {      ;#  -45 <= theta <45
      set hx  0.0; set hy  1.0
   } else {                     ;#   45 <= theta <135
      set hx -1.0; set hy  0.0
   }

   return [list $hx $hy 0.0 0.0 0.0 0.0]
   ## Note: h will be discontinuous across 45 degree boundaries, so the
   ## energy stepsize control energy_precision needs to be disabled in
   ## Oxs_RungeKuttaEvolve
}

Specify Oxs_ScriptUZeeman:rotating [subst {
  script SpinMag
  script_args {base_state_id}
  multiplier [expr {$Happ*(0.001/$mu0)}]
}]

Specify Oxs_Demag {}

Specify Oxs_RungeKuttaEvolve:evolve [subst {
   alpha 0.1
   method $rkmethod
   energy_precision -1
}]

Specify Oxs_TimeDriver {
 evolver :evolve
 stopping_time 1e-9
 comment {stage_iteration_limit 1009}
 stage_count 10
 mesh :mesh
 Ms 1700e3
 m0 {1 0 0}
}

set TWOPI [expr {8*atan(1.)}]

