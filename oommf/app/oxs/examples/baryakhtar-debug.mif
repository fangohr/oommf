# MIF 2.1
# MIF Example File: baryakhtar.mif
#  Implements simulation reported in Figs. 1 and 2 from paper 
#
#    "Phenomenological description of the nonlocal magnetization
#    relaxation in magnonics, spintronics, and domain-wall dynamics,"
#    Weiwei Wang, Mykola Dvornik, Marc-Antonio Bisotti, Dmitri
#    Chernyshenko, Marijan Beg, Maximilian Albert, Arne Vansteenkiste,
#    Bartel V. Waeyenberge, Andriy N. Kuchko, Volodymyr V. Kruglyak, and
#    Hans Fangohr, Physical Review B, 92, 054430 (10 pages) (2015).
#
# If parameter "smooth" is zero, then the applied field is applied
# without ramping at time t=0, and the spatial extent has a sharp cutoff
# at x=2nm.  If paramter "smooth" is one (the default), then temporal
# profile of the applied field is scaled with a 0.5*(1-cos(t)) factor
# across the first "smooth_time" seconds, and the spatial extent is
# smoothly reduced via another cosine across the range 2 nm < x <
# "smooth_length".  The smoothing operations reduce the amplitude of the
# response, but yield a cleaner signal (i.e., smaller harmonics).

Parameter alpha 0.01
Parameter beta  0.02
Parameter amp 1000 ;# in Oersted
Parameter freq 30  ;# In GHz

Parameter smooth 1  ;# 0 => Match paper description
                    ;# 1 => Smooth applied field profile, spatial and temporal.
set smooth_time  0.5e-9
set smooth_length 30e-9

Parameter axis x  ;# One of x, y, or z.  For code testing.

set pi [expr {4*atan(1.0)}]
set mu0 [expr {4*$pi*1e-7}]

set Ms 8.6e5
set A 1.3e-11


set xsize [set ysize [set zsize 2e-9]]
set ${axis}size 2002e-9

set xcellsize [set ycellsize [set zcellsize 2e-9]]
set ${axis}cellsize 1e-9

Specify Oxs_BoxAtlas:atlas [subst {
  xrange {0 $xsize}
  yrange {0 $ysize}
  zrange {0 $zsize}
}]

Specify Oxs_RectangularMesh:mesh [subst {
  cellsize {$xcellsize $ycellsize $zcellsize}
  atlas :atlas
}]

# Applied field
set xend $xsize; set yend $ysize; set zend $zsize;
set ${axis}end 2e-9
set xperp [set yperp [set zperp 0.0]]
switch -exact $axis {
   x { set perp_index 1 ; set yperp 1.0 ; set minit {1 0 0} }
   y { set perp_index 2 ; set zperp 1.0 ; set minit {0 1 0} }
   z { set perp_index 0 ; set xperp 1.0 ; set minit {0 0 1} }
   default { error "BAD axis: $axis" }
}
if {!$smooth} {
   Specify Oxs_BoxAtlas:leftend [subst {
      xrange {0 $xend}
      yrange {0 $yend}
      zrange {0 $zend}
   }]
   Specify Oxs_AtlasVectorField:endfield [subst {
      atlas :leftend
      default_value {0 0 0}
      values {
         leftend {$xperp $yperp $zperp}
      }
   }]
} else { ;# Smooth
   proc endfieldscript { x y z } [subst -nocommands {
      # Spatial profile for applied field
      global smooth_length pi
      set left_edge 2e-9
      if {\$$axis <= \$left_edge} {
         return [list $xperp $yperp $zperp]
      }
      if {\$$axis >= \$smooth_length} {
         return [list 0.0 0.0 0.0]
      }
      # Cosine decay:
      set lambda [expr {(\$$axis-\$left_edge)/(\$smooth_length-\$left_edge)}]
      set wgt [expr {0.5*(cos(\$pi*\$lambda)+1)}]
      return [lreplace [list 0.0 0.0 0.0] $perp_index $perp_index \$wgt]
   }]
   Specify Oxs_ScriptVectorField:endfield {
      script endfieldscript
      script_args rawpt
      atlas :atlas
   }
}

set amp [expr {$amp*1e-4/$mu0}]
set freq [expr {2*$pi*$freq*1e9}]
set smooth_adj [expr {$pi/$smooth_time}]
proc SineProfile { total_time } {
   global amp freq smooth smooth_time smooth_adj
   set S [expr {$amp*sin($freq*$total_time)}]
   set dS [expr {$amp*$freq*cos($freq*$total_time)}]
   if {$smooth && $total_time < $smooth_time} {
      set wgt [expr {0.5*(1-cos($smooth_adj*$total_time))}]
      set dwgt [expr {0.5*sin($smooth_adj*$total_time)*$smooth_adj}]
      set dS [expr {$dS*$wgt + $S*$dwgt}]
      set S [expr {$S*$wgt}] ;# Compute this *after* dS since this
      ## line changes S.
   }
   return [list $S $S $S $dS $dS $dS]
   ## Component selection controlled by :endfield
}

Specify Oxs_TransformZeeman {
   field :endfield
   type diagonal
   script SineProfile
   script_args total_time
}


# Exchange
Specify Oxs_UniformExchange [subst {
  A  $A
}]

# Demag
Specify Oxs_Demag {}

# Evolver
set G [expr {$A/($mu0*$Ms*$Ms)}]
set sigma [expr {$beta*$G}]

proc alphascript { x y z } {
   # Spatially varying damping parameter alpha
   global alpha
   set alphamin $alpha
   set alphamax 0.5
   set xramp 1802e-9
   set xstop 2002e-9
   if {$x<=1802e-9} {
      return $alphamin
   }
   set lambda [expr {($x-$xramp)/($xstop-$xramp)}]
   return [expr {$alphamin + ($alphamax-$alphamin)*$lambda}]
}
Specify Oxs_ScriptScalarField:alpha {
   script alphascript
   script_args rawpt
   atlas :atlas
}

if {$sigma != 0.0} {
   Specify Oxs_RungeKuttaEvolve:evolve [subst {
      alpha :alpha
      baryakhtar_sigma $sigma
   }]
} else {
   Specify Oxs_RungeKuttaEvolve:evolve [subst {
      alpha :alpha
   }]
}

# Driver
Specify Oxs_TimeDriver [subst {
   evolver :evolve
   stopping_time 4e-9
   mesh :mesh
   Ms $Ms
   m0 [list $minit]
}]

#Destination archive mmArchive
#Schedule DataTable archive Stage 1
