# MIF 2.2
# MIF Example File: ellipsea.mif
#
# Description: Hysteresis loop on an array of elliptical cylinders or
#  ellipsoids (sea of balls), or their complement (sea of holes).

set pi [expr {4*atan(1.0)}]
set mu0 [expr {4*$pi*1e-7}]

# Block dimensions and cell sizes, in meters
Parameter blockx 100e-9
Parameter blocky  52e-9
Parameter blockz  12e-9
Parameter xcell 2e-9
Parameter ycell 2e-9
Parameter zcell 2e-9
Parameter margin 2e-9

# Number of blocks in each dimension
Parameter xcount 4
Parameter ycount 3
Parameter zcount 2

# Periodic?
Parameter pbcdir none

# Ellipsoids or elliptical cylinders?
Parameter geometry Ellipse
set geometry [string totitle $geometry]
Parameter axis z    ;# Active for elliptical cylinders only

if {[string match Ellipse $geometry]} {
   set atlas_type Oxs_EllipseAtlas
   set axis "axis $axis"
} else {
   set atlas_type Oxs_EllipsoidAtlas
   set axis {}
}

# Balls or holes?
Parameter sea_type holes
if {[string match holes $sea_type]} {
   set inner universe
   set outer sea
} else {
   set inner sea
   set outer universe
}

# Sub-atlas template
set template "$atlas_type {
   xrange {%.16e %.16e}
   yrange {%.16e %.16e}
   zrange {%.16e %.16e}
   name {$inner $outer}
   margin [list $margin]
   $axis
}"

SetOptions [subst {
   basename [format "sea_of_%s-%gx%gx%g" $sea_type \
                [expr {$xcell*1e9}] [expr {$ycell*1e9}] [expr {$zcell*1e9}]]
}]

set sim_xmax [expr {$xcount*$blockx}]
set sim_ymax [expr {$ycount*$blocky}]
set sim_zmax [expr {$zcount*$blockz}]

# Build full atlas
set subatlases [list]
for {set i 0} {$i<$xcount} {incr i} {
   set xmin [expr {$i*$blockx}]
   set xmax [expr {($i+1)*$blockx}]
   for {set j 0} {$j<$ycount} {incr j} {
      set ymin [expr {$j*$blocky}]
      set ymax [expr {($j+1)*$blocky}]
      for {set k 0} {$k<$zcount} {incr k} {
         set zmin [expr {$k*$blockz}]
         set zmax [expr {($k+1)*$blockz}]
         lappend subatlases atlas
         lappend subatlases \
            [format $template $xmin $xmax $ymin $ymax $zmin $zmax]
      }
   }
}
Specify Oxs_MultiAtlas:atlas [subst {
   $subatlases
   xrange {0 $sim_xmax}
   yrange {0 $sim_ymax}
   zrange {0 $sim_zmax}
}]

if {[string match "none" $pbcdir]} {
  Specify Oxs_RectangularMesh:mesh [subst {
   cellsize {$xcell $ycell $zcell}
   atlas :atlas
   }]
} else {
  Specify Oxs_PeriodicRectangularMesh:mesh [subst {
   cellsize {$xcell $ycell $zcell}
   atlas :atlas
   periodic $pbcdir
   }]
}


# Exchange
# Note: A is automatically zero in any cell with Ms=0
Specify Oxs_UniformExchange {
  A   1.3e-11
}

# Demag
Specify Oxs_Demag {}

# Applied field
Specify Oxs_UZeeman [subst {
  multiplier [expr {0.001/$mu0}]
  Hrange {
     {     0    0   0   200   20   20   10 }
     {  200    20  20  -200  -20  -20   20 }
     { -200   -20 -20   200   20   20   20 }
  }
}]

Specify Oxs_CGEvolve:evolve {}

proc Vortex { x y z } {
    set yrad [expr {$y-0.5}]
    set zrad [expr {$z-0.5}]
    set normsq [expr {$yrad*$yrad+$zrad*$zrad}]
    if {$normsq <= 0.0125} {return "1 0 0"}
    return [list 0 $zrad [expr {-1*$yrad}]]
}

Specify Oxs_MinDriver {
 evolver :evolve
 stopping_mxHxm 0.1
 mesh :mesh
 Ms { Oxs_AtlasScalarField {
    atlas :atlas
    default_value 0.0
    values {
       sea 8e5
    }
 }}
 m0 { Oxs_ScriptVectorField {
    atlas :atlas
    script Vortex
    norm  1
 }}
}
