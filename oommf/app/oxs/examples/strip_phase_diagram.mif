# MIF 2.1
# MIF Example File: strip_phase_diagram.mif
#
# MIF file example designed for parameter studies.  A sequence of runs
# can be performed by calling the boxsi batch solver from a nested pair
# of shell for-loop that iterate across the desired strip+thickness
# pairs.  For example, from the Windows command prompt one can run
#
#   for /L %w in (80 20 500) do @for /L %t in (2 1 20) do (
#      tclsh oommf.tcl boxsi strip_phase_diagram.mif -threads 8 ^
#      -parameters "width %w thickness %t")
#
# The equivalent for the bash shell on Linux or macOS is
#
#   for w in `seq 80 20 500` ; do for t in `seq 2 1 20` ; do
#      tclsh oommf.tcl boxsi strip_phase_diagram.mif -threads 8 \
#      -parameters "width $w thickness $t"
#   done ; done
#
# The simulations are of a head-to-head domain wall in strip geometry,
# in essence a simplified version of the h2h.mif example.  In this file
# the Parameters thickness, width, and length set the strip geometry, in
# nm. If the length is not specified then it is set to eight times the
# width.
#
# The initial state is a transverse head-to-head domain wall with a
# small asymmetric cant.
#
# The Parameter cellsize, also in nm, sets the maximum cell
# dimension. The actual cell dimensions are adjusted downward so that
# each cell edge divides exactly into the corresponding strip dimension.
#
# The output files are named according to the scheme
#
#  strip_phase_diagram_t002_w0080_l000640-Oxs_MinDriver-Spin-00-0012927.omf
#
# where "T002", "W0080", and "L000640" denote a strip of thickness 2 nm,
# width of 80 nm, and length of 640 nm. As usual, the 00-0012927 tail indicates
# results from stage 0, iteration 12927.
#

set pi [expr {4*atan(1.0)}]
set mu0 [expr {4*$pi*1e-7}]
RandomSeed 10

# Base simulation cellsize (nm)
Parameter cellsize    4

# Strip geometry
Parameter thickness  10  ;# Thickness in nm
Parameter width      50  ;# Width in nm
Parameter length     {}    ;# Length in nm

if {[string match {} $length]} {
   # If length is not specified, set it to eight times the width.
   set length [expr {8*$width}]
}

Parameter basename [format strip_phase_diagram_T%03d_W%04d_L%06d \
                       $thickness $width $length]

# Convert dimensions from nm to m
foreach val [list thickness width length cellsize] {
   set $val [expr {[set $val]*1e-9}]
}

# Adjust cell dimensions to fit strip geometry
proc FitCell { len csize } {
   # Returns the largest value not larger than csize
   # that divides exactly into len
   return [expr {$len/ceil($len/double($csize))}]
}
set zcellsize [expr {[FitCell $thickness $cellsize]}]
set ycellsize [expr {[FitCell $width $cellsize]}]
set xcellsize [expr {[FitCell $length $cellsize]}]

# Misc parameters
Parameter Ms 8e5     ;# A/m
Parameter  A 1.3e-11 ;# J/m
Parameter stopping_mxHxm 1e-3

# Main atlas
Specify Oxs_BoxAtlas:atlas [subst {
   xrange {0 $length}
   yrange {0 $width}
   zrange {0 $thickness}
}]

Specify Oxs_RectangularMesh:mesh [subst {
  cellsize {$xcellsize $ycellsize $zcellsize}
  atlas :atlas
}]


# Two small columns of cells, offset outward from the middle x value,
# can be optionally fixed to perhaps stabilize the domain wall; the
# offsets allow closure domains to form at the strip ends which may
# reduce the edge stray field affect. This is disabled by default
# because it doesn't appear to do much other than stop rogue domain
# walls before the get to the strip edge. It would be better to fix the
# spins at the edge and introduce charge plates to mimic semi-infinite
# uniformly magnetized strips.
#

# Supplemental atlas, used to specify fixed spin bands
Parameter fixed_offset [expr {4*$width}]
Parameter fixed_offset_width 0 ;# [expr {1.5*$xcellsize}]
if {$fixed_offset_width<=0.0} { 
   # Don't fix any spins
   Specify Oxs_MultiAtlas:FixedBands {
      atlas {Oxs_BoxAtlas:left_band {
         xrange {-1 -1} yrange {0 0} zrange {0 0}
      }}
      atlas {Oxs_BoxAtlas:right_band {
         xrange {-1 -1} yrange {0 0} zrange {0 0}
      }}

   }
} else {
   set xfa [expr {0.5*$length-$fixed_offset}]
   if {$xfa<0.0} {
      set xfa 0.0
   }
   set xfd [expr {$length-$xfa}]
   set xfb [expr {$xfa+$fixed_offset_width}]
   set xfc [expr {$xfd-$fixed_offset_width}]
   Specify Oxs_MultiAtlas:FixedBands [subst {
      atlas {Oxs_BoxAtlas:left_band {
         xrange {$xfa $xfb}
         yrange {0 $width}
         zrange {0 $thickness}
      }}
      atlas {Oxs_BoxAtlas:right_band {
         xrange {$xfc $xfd}
         yrange {0 $width}
         zrange {0 $thickness}
      }}
   }]
}

# Exchange
Specify Oxs_UniformExchange [subst {
  A  $A
}]

# Demag
Specify Oxs_Demag {}

#####################################################################
### Evolver and driver for energy minimization
proc HeadToHead { x y z } {
   # (x,y,z) are relative components, each in range [0,1]
   set centerpt 0.5
   # Introduce a small skew in x to break symmetry across the yz plane
   set sx [expr {$x*(1+($y-$centerpt)*0.01)}]
   set mx [expr {-1*tanh(12.0*($sx-$centerpt)/double($centerpt))}]
   set my [expr {sqrt(1.0-$mx*$mx)}]
   set mz 0.01 ;# Just to break xy-plane symmetry
   return [list $mx $my $mz]
}

Specify Oxs_CGEvolve:evolve {
   fixed_spins {
      :FixedBands left_band right_band
   }
}

Specify Oxs_MinDriver [subst {
   evolver :evolve
   mesh :mesh
   Ms $Ms
   m0 { Oxs_ScriptVectorField {
      script HeadToHead
      atlas :atlas
      norm 1.0
   } }
   stopping_mxHxm $stopping_mxHxm
   basename $basename
}]

# Output
Destination archive mmArchive
Schedule Oxs_MinDriver::Spin archive done
Schedule DataTable archive done

Destination graph mmGraph
Schedule DataTable graph step 10
