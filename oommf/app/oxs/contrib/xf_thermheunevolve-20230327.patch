Only in xf_thermheunevolve: versdate.txt
diff -ru xf_thermheunevolve/xf_thermheunevolve.cc xf_thermheunevolve-new/xf_thermheunevolve.cc
--- xf_thermheunevolve/xf_thermheunevolve.cc	2022-10-26 22:15:46.000000000 -0400
+++ xf_thermheunevolve-new/xf_thermheunevolve.cc	2023-03-25 16:06:51.000000000 -0400
@@ -11,10 +11,10 @@
  *
  */
 
-#include <float.h>
+#include <cfloat>
 #include <string>
-#include <stdlib.h>
-#include <time.h>
+#include <cstdlib>
+#include <ctime>
 
 #include "nb.h"
 #include "director.h"
@@ -75,8 +75,8 @@
     max_step_decrease(0.03125), max_step_increase_limit(4.0),
     max_step_increase_adj_ratio(1.9),
     reject_goal(0.05), reject_ratio(0.05),
-    KBoltzmann(1.38062e-23),tmpStepsize(1e-17),
-    has_tempscript(0),temperature(0.),
+    KBoltzmann(1.38062e-23),temperature(0.),
+    tmpStepsize(1e-17),has_tempscript(0),
     energy_state_id(0),next_timestep(1e-27),
     rkstep_ptr(NULL)
 {
@@ -337,7 +337,7 @@
   }
 
   const OC_INDEX size = mesh->Size();
-  OC_INDEX i,j;
+  OC_INDEX i;
 
   alpha_init->FillMeshValue(mesh,alpha);
   gamma_init->FillMeshValue(mesh,gamma);
@@ -718,7 +718,11 @@
   nstate.stage_iteration_count = cstate.stage_iteration_count + 1;
 
   // Additional timestep control
+#if OOMMF_API_INDEX < 20230325
   driver->FillStateSupplemental(nstate);
+#else
+  driver->FillStateSupplemental(cstate,nstate);
+#endif
 
   // Check for forced step.
   // Note: The driver->FillStateSupplemental call may increase the
@@ -1028,7 +1032,7 @@
   GetEnergyDensity(next_state_key.GetReadReference(),temp_energy,
                    &vtmpA,NULL,pE_pt);
   UpdateHfluct(cstate->mesh);// Update the random field before calculating slopes
-  Oxs_SimState& workstate = next_state_key.GetWriteReference();
+  // Oxs_SimState& workstate = next_state_key.GetWriteReference();
   tmpStepsize = stepsize;
   Calculate_dm_dt(next_state_key.GetReadReference(),vtmpA,pE_pt,
                   vtmpA,max_dm_dt,dE_dt,timestep_lower_bound);
@@ -1896,7 +1900,7 @@
 OC_BOOL
 Xf_ThermHeunEvolve::Step(const Oxs_TimeDriver* driver,
                       Oxs_ConstKey<Oxs_SimState> current_state_key,
-                      const Oxs_DriverStepInfo& step_info,
+                      Oxs_DriverStepInfo& step_info,
                       Oxs_Key<Oxs_SimState>& next_state_key)
 {
   const OC_REAL8m bad_energy_cut_ratio = 0.75;
@@ -1912,7 +1916,7 @@
   OC_BOOL start_dm_active=0;
   if(next_timestep<=0.0 ||
      (cstate.stage_iteration_count<1
-      && step_info.current_attempt_count==0)) {
+      && step_info.GetCurrentAttemptCount()==0)) {
     if(cstate.stage_number==0
        || stage_init_step_control == SISC_START_DM) {
       start_dm_active = 1;
diff -ru xf_thermheunevolve/xf_thermheunevolve.h xf_thermheunevolve-new/xf_thermheunevolve.h
--- xf_thermheunevolve/xf_thermheunevolve.h	2022-10-26 22:15:46.000000000 -0400
+++ xf_thermheunevolve-new/xf_thermheunevolve.h	2023-03-21 18:57:29.000000000 -0400
@@ -313,7 +313,7 @@
   virtual  OC_BOOL
   Step(const Oxs_TimeDriver* driver,
        Oxs_ConstKey<Oxs_SimState> current_state,
-       const Oxs_DriverStepInfo& step_info,
+       Oxs_DriverStepInfo& step_info,
        Oxs_Key<Oxs_SimState>& next_state);
   // Returns true if step was successful, false if
   // unable to step as requested.
