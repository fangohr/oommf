/* FILE: ExchangeAndDMI_D2d_BCs.cc
 *
 * Exchange and Dzyaloshinskii-Moriya field and energy calculation.
 *
 * DMI is defined for the D2d crystallographic class [1, 2]:
 *
 * $w_\text{dmi} = D ( L_{yz}^{(x)} + L_{xz}^{(y)} )
 *
 * This extension works both with and without periodic boundary conditions.
 *
 * Optional are Neumann boundary conditions at the atlas boundary and at
 * material boundaries defined by the region interfaces in the atlas.
 * With DMI present in the material, the boundary conditions of exchange
 * are coupled to those of the DMI, if we exclude surface anisotropies.
 *
 * The field calculation of the DMI follows the discrete spin theory form
 * which uses a DMI vector, simplifying the description of the field
 * in the finite-difference approximation
 *
 * Extension and modification by David Cortes-Ortuno based on the
 * oommf-extension-dmi-d2d class by the joommf project
 *
 * [1] A. N. Bogdanov and D. A. Yablonskii. Zh. Eksp. Teor. Fiz. 95, 178-182
 * (1989).
 * [2] C. Abert. Micromagnetics and spintronics: models and numerical methods.
 * The European Physical Journal B. 92 (120). 2019.
 */

#ifndef _OXS_EXCHDMI_D2D_12NGBRS
#define _OXS_EXCHDMI_D2D_12NGBRS

#include "atlas.h"
#include "energy.h"
#include "key.h"
#include "mesh.h"
#include "meshvalue.h"
#include "rectangularmesh.h"
#include "simstate.h"
#include "threevector.h"
#include "mesh_neighbors.h"  // This include <vector>

/* End includes */

class Oxs_ExchangeAndDMI_D2d_12ngbrs : public Oxs_Energy {
private:
  OC_INT4m A_size;
  OC_REAL8m D;
  OC_REAL8m Aex;
  Oxs_Key<Oxs_Atlas> atlaskey;
  Oxs_OwnedPointer<Oxs_Atlas> atlas;
  mutable OC_INT4m mesh_id;
  mutable Oxs_MeshValue<OC_INT4m> region_id;

  // Periodic boundaries?
  mutable int xperiodic;
  mutable int yperiodic;
  mutable int zperiodic;

  mutable int xdim;
  mutable int ydim;
  mutable int zdim;
  mutable OC_REAL8m wgtx;
  mutable OC_REAL8m wgty;
  mutable OC_REAL8m wgtz;
  mutable OC_REAL8m deltaX;
  mutable OC_REAL8m deltaY;
  mutable OC_REAL8m deltaZ;
  mutable OC_INDEX xydim;
  mutable OC_INDEX xyzdim;

  // Array with neighbors. Size should be: 6 * mesh size
  std::vector<OC_INDEX> n_neighbors;
  std::vector<OC_INDEX> nn_neighbors;

protected:
  virtual void GetEnergy(const Oxs_SimState &state, Oxs_EnergyData &oed) const;

public:
  virtual const char *ClassName() const; // ClassName() is
  /// automatically generated by the OXS_EXT_REGISTER macro.
  Oxs_ExchangeAndDMI_D2d_12ngbrs(const char *name,     // Child instance id
                                 Oxs_Director *newdtr, // App director
                                 const char *argstr);  // MIF input block parameters
  virtual ~Oxs_ExchangeAndDMI_D2d_12ngbrs();
  virtual OC_BOOL Init();
};

#endif // _OXS_EXCHDMI_D2D_12NGBRS
