# If we ever introduce testing here,
# it is likely to use Python.
#
# So we leave the Python installation commands
# below commented out, but in this .travis.yml file.
#
# Hans, 22 October 2016

sudo: required

os: linux
dist: trusty

language: python

python:
   - "3.5"



env:
  OOMMFTCL=/opt/oommf/oommf/oommf.tcl

before_install:
- sudo apt-get update -y
#- sudo apt-get -y install python3-pip python-dev
#- sudo pip3 install -U setuptools
#- sudo pip3 install -U virtualenvwrapper
#- python3 -V
#- pip3 -V
#- pip3 install matplotlib scipy numpy
#- python3 -c "import matplotlib"
#- sudo ln -s /usr/bin/python3 /usr/local/bin/python

- echo "Installation of OOMMF on host system"
- export OOMMF_TK_CONFIG=/usr/lib/x86_64-linux-gnu/tk8.6/tkConfig.sh
- export OOMMF_TCL_CONFIG=/usr/lib/x86_64-linux-gnu/tcl8.6/tclConfig.sh
- sudo apt-get update -y
- sudo apt-get -y install tk8.6 tcl8.6 tcl8.6-dev tk8.6-dev
- pwd
- echo "Clone oommf repository to /opt"
- mkdir -p /opt
- pushd /opt
#- git clone https://github.com/fangohr/oommf.git
#- cd oommf
- pwd
- make
- echo "Building Docker container (will take some time)"
- cd docker/oommf
# build docker file
- docker build -t testimage .
- pwd
- popd
- pwd

script:
  - pwd
  #- py.test --version
  #- python --version
  - echo $PATH
  - echo $OOMMFTCL
  - echo "We only test that the +version call succeeds.
    More tests would be better.
    Although the joommf repositories cover some system testing.
    see https://joommf.github.io.
    We start with OOMMF installed on the host system:"
  - tclsh ${OOMMFTCL} +version
  # Get some version information about oommf code
  - cat oommf-version
  - cat versionlog.txt
  # Get system tool versions
  - g++ --version
  - echo 'puts $tcl_version;exit 0' | tclsh
  - echo 'puts [info patchlevel];exit 0' | tclsh
  - cat /etc/issue

  # Now try to build docker file
  - echo "Now we test the OOMMF installation inside Docker:"


  # Ask OOMMF in docker contain for version number
  - docker run testimage tclsh /usr/local/oommf/oommf/oommf.tcl +version
  # and get some other diagnostic data
  - docker run testimage hostname
  - docker run testimage pwd
  - docker run testimage g++ --version
  - docker run testimage echo 'puts $tcl_version;exit 0' | tclsh
  - docker run testimage echo 'puts [info patchlevel];exit 0' | tclsh
  - docker run testimage cat /etc/issue
